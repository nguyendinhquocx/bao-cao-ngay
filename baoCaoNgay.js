/**
 * FINAL VERSION: G·ª≠i email b√°o c√°o t·ªïng h·ª£p ng√†y 
 * 
 * FIXED:
 * ‚úÖ Weekly stars calculation - T√≠nh ƒë√∫ng t·ª´ th·ª© 2 tu·∫ßn hi·ªán t·∫°i ƒë·∫øn h√¥m nay
 * ‚úÖ Remove fraction display - B·ªè hi·ªÉn th·ªã 1/2, 2/3... 
 * ‚úÖ Accurate star colors - M√†u sao ch√≠nh x√°c theo performance th·ª±c t·∫ø
 * ‚úÖ Custom date support - C√≥ th·ªÉ g·ª≠i b√°o c√°o cho ng√†y b·∫•t k·ª≥
 * 
 * @version 2.2 Enhanced
 * @author Nguyen Dinh Quoc
 * @updated 2025-08-02
 * 
 * @param {string|Date} customDate - Ng√†y t√πy ch·ªçn (format: 'YYYY-MM-DD' ho·∫∑c Date object). N·∫øu kh√¥ng truy·ªÅn th√¨ d√πng ng√†y hi·ªán t·∫°i
 * 
 * USAGE:
 * sendDailyReportSummary() - G·ª≠i b√°o c√°o ng√†y hi·ªán t·∫°i
 * sendDailyReportSummary('2025-07-15') - G·ª≠i b√°o c√°o ng√†y 15/7/2025
 * sendDailyReportSummary(new Date('2025-07-15')) - G·ª≠i b√°o c√°o ng√†y 15/7/2025
 */
function sendDailyReportSummary(customDate = null) {
  const CONFIG = {
    sheetName: 'check bc',

    // Uncomment khi deploy production
    // emailTo: 'luan.tran@hoanmy.com, khanh.tran@hoanmy.com, hong.le@hoanmy.com, quynh.bui@hoanmy.com, thuy.pham@hoanmy.com, anh.ngo@hoanmy.com, truc.nguyen3@hoanmy.com, trang.nguyen9@hoanmy.com, tram.mai@hoanmy.com, vuong.duong@hoanmy.com, phong.trinh@hoanmy.com, phi.tran@hoanmy.com, quoc.nguyen3@hoanmy.com',
    emailTo: 'quoc.nguyen3@hoanmy.com',

    dateHeaderRanges: ['e3:n3', 'e17:n17', 'e30:o30'],
    dataRanges: ['B4:n13', 'B18:n27', 'B31:o40'],

    // ICON m·∫∑c ƒë·ªãnh (ƒëen/x√°m)
    starIconDefault: 'https://cdn-icons-png.flaticon.com/128/2956/2956792.png',
    calendarIconDefault: 'https://cdn-icons-png.flaticon.com/128/3239/3239948.png',
    completedIconDefault: 'https://cdn-icons-png.flaticon.com/128/7046/7046053.png',
    pendingIconDefault: 'https://cdn-icons-png.flaticon.com/128/17694/17694317.png',

    // ICON m√†u xanh khi perfect day
    starIconPerfect: 'https://cdn-icons-png.flaticon.com/128/18245/18245248.png',
    calendarIconPerfect: 'https://cdn-icons-png.flaticon.com/128/15881/15881446.png',
    completedIconPerfect: 'https://cdn-icons-png.flaticon.com/128/10995/10995390.png',
    pendingIconPerfect: 'https://cdn-icons-png.flaticon.com/128/17694/17694222.png',

    // Achievement icons
    celebrationIcon: 'https://cdn-icons-png.flaticon.com/128/9422/9422222.png',

    // DEBUG MODE
    debugMode: false // Set true ƒë·ªÉ troubleshoot
  };

  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.sheetName);

    if (!sheet) {
      Logger.log(`‚ùå Sheet '${CONFIG.sheetName}' kh√¥ng t·ªìn t·∫°i`);
      return;
    }

    // Parse custom date or use current date
    const targetDate = parseTargetDate(customDate);
    const today = new Date(); // Keep for reference
    const targetDateStr = Utilities.formatDate(targetDate, ss.getSpreadsheetTimeZone(), "M/d/yyyy");
    const isWeekend = targetDate.getDay() === 0; // Ch·ªß nh·∫≠t
    const isCustomDate = customDate !== null;

    // ƒê·ªãnh d·∫°ng ng√†y chi ti·∫øt v·ªõi th·ª©
    const dayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© hai', 'Th·ª© ba', 'Th·ª© t∆∞', 'Th·ª© nƒÉm', 'Th·ª© s√°u', 'Th·ª© b·∫£y'];
    const dayOfWeek = dayNames[targetDate.getDay()];
    const detailedDate = `${dayOfWeek}, ng√†y ${targetDate.getDate()} th√°ng ${targetDate.getMonth() + 1} nƒÉm ${targetDate.getFullYear()}`;

    if (CONFIG.debugMode) {
      Logger.log(`üéØ Target date: ${targetDateStr} (${isCustomDate ? 'Custom' : 'Current'})`);
      Logger.log(`üìÖ Detailed date: ${detailedDate}`);
    }

    // T√¨m v·ªã tr√≠ c·ªôt ng√†y h√¥m nay trong c√°c v√πng header
    let dateColumnIndex = null, dataRange = null, values = null;
    for (let i = 0; i < CONFIG.dateHeaderRanges.length; i++) {
      try {
        const headerRange = sheet.getRange(CONFIG.dateHeaderRanges[i]);
        const headerValues = headerRange.getValues()[0];
        for (let j = 0; j < headerValues.length; j++) {
          const cell = headerValues[j];
          if (cell instanceof Date) {
            const dateStr = Utilities.formatDate(cell, ss.getSpreadsheetTimeZone(), "M/d/yyyy");
            if (dateStr === targetDateStr) {
              dateColumnIndex = headerRange.getColumn() + j;
              dataRange = sheet.getRange(CONFIG.dataRanges[i]);
              values = dataRange.getValues();
              break;
            }
          }
        }
        if (dateColumnIndex !== null) break;
      } catch (error) {
        Logger.log(`‚ö†Ô∏è L·ªói khi ƒë·ªçc range ${CONFIG.dateHeaderRanges[i]}: ${error.message}`);
        continue;
      }
    }

    if (!values) {
      Logger.log(`‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt ng√†y ${targetDateStr} trong b·∫•t k·ª≥ v√πng ti√™u ƒë·ªÅ n√†o.`);
      return;
    }

    // L·∫•y danh s√°ch ƒë√£ b√°o c√°o v√† ch∆∞a b√°o c√°o
    let reported = [], notReported = [];
    for (let row of values) {
      const maNV = row[0];
      const tenNV = row[2];
      const reportMark = row[dateColumnIndex - dataRange.getColumn()];
      if (maNV && tenNV) {
        if (reportMark === 'X') {
          reported.push(tenNV);
        } else {
          notReported.push(tenNV);
        }
      }
    }

    // Ki·ªÉm tra perfect day v√† t√≠nh totals
    const totalEmployees = reported.length + notReported.length;
    const isPerfectDay = notReported.length === 0 && reported.length > 0;
    const subject = isWeekend ?
      `HMSG | P.KD - TH·ªêNG K√ä TU·∫¶N` :
      `HMSG | P.KD - T·ªîNG H·ª¢P B√ÅO C√ÅO NG√ÄY ${targetDateStr}${isCustomDate ? ' ' : ''}`;

    // Ch·ªçn icons theo tr·∫°ng th√°i
    const calendarIcon = isPerfectDay ? CONFIG.calendarIconPerfect : CONFIG.calendarIconDefault;
    const completedIcon = isPerfectDay ? CONFIG.completedIconPerfect : CONFIG.completedIconDefault;
    const pendingIcon = isPerfectDay ? CONFIG.pendingIconPerfect : CONFIG.pendingIconDefault;

    // Color scheme
    const colors = isPerfectDay ? {
      border: '#22c55e',
      headerTitle: '#22c55e',
      headerSubtitle: '#22c55e',
      dateText: '#22c55e',
      sectionTitle: '#22c55e',
      namesList: '#22c55e',
      footerName: '#22c55e',
      footerLabel: '#22c55e', // Xanh khi perfect day
      disclaimerColor: '#22c55e'
    } : {
      border: '#000000',
      headerTitle: '#1a1a1a',
      headerSubtitle: '#8e8e93',
      dateText: '#495057',
      sectionTitle: '#1a1a1a',
      pendingTitle: '#dc3545',
      namesList: '#1a1a1a',
      footerName: '#8e8e93',
      footerLabel: '#1a1a1a', // ƒêen khi kh√¥ng perfect
      disclaimerColor: '#8e8e93'
    };

    // N·∫øu l√† Ch·ªß nh·∫≠t, t·∫°o Weekly Performance Dashboard
    let weeklyDashboard = '';
    if (isWeekend) {
      weeklyDashboard = buildWeeklyDashboard(sheet, ss, CONFIG, colors, targetDate);
    }

    // Smart Badge Function
    const getPerformanceBadgeStyle = (completed, total) => {
      const rate = completed / total;
      if (rate === 1) return 'background: linear-gradient(135deg, #22c55e, #16a34a); color: white;';
      if (rate >= 0.8) return 'background: linear-gradient(135deg, #84cc16, #65a30d); color: white;';
      if (rate >= 0.6) return 'background: linear-gradient(135deg, #eab308, #ca8a04); color: white;';
      return 'background: linear-gradient(135deg, #ef4444, #dc2626); color: white;';
    };

    // Build employee lists (ch·ªâ hi·ªÉn th·ªã n·∫øu kh√¥ng ph·∫£i weekly dashboard)
    let reportedHtml = '', notReportedHtml = '';

    if (!isWeekend) {
      // Danh s√°ch ƒë√£ b√°o c√°o v·ªõi star calculation ch√≠nh x√°c
      if (reported.length > 0) {
        const reportedWithStars = reported.map(name => ({
          name,
          stars: getWeeklyStars(sheet, name, ss, CONFIG, targetDate)
        }));
        reportedWithStars.sort((a, b) => b.stars - a.stars);

        reportedHtml = reportedWithStars.map(person => {
          const starColor = getStarColor(person.stars);
          const starsDisplay = person.stars > 0
            ? `<span style="color: ${starColor}; font-size: 16px;">‚òÖ</span>`.repeat(person.stars)
            : '';

          return `
            <div style="padding: 16px 0; font-size: 15px; font-weight: 400; color: ${colors.namesList}; display: flex; justify-content: space-between; align-items: center;">
              <span style="flex: 1;">${person.name}</span>
              ${person.stars > 0 ? `<span style="display: flex; gap: 2px;">${starsDisplay}</span>` : ''}
            </div>
          `;
        }).join('');
      } else {
        reportedHtml = `<div style="padding: 16px 0; font-size: 15px; color: #8e8e93; font-style: italic;">Ch∆∞a c√≥ b√°o c√°o n√†o</div>`;
      }

      // Danh s√°ch ch∆∞a b√°o c√°o v·ªõi star calculation ch√≠nh x√°c
      if (notReported.length > 0) {
        const notReportedWithStars = notReported.map(name => ({
          name,
          stars: getWeeklyStars(sheet, name, ss, CONFIG, targetDate)
        }));
        notReportedWithStars.sort((a, b) => b.stars - a.stars);

        notReportedHtml = notReportedWithStars.map(person => {
          const starColor = getStarColor(person.stars);
          const starsDisplay = person.stars > 0
            ? `<span style="color: ${starColor}; font-size: 16px;">‚òÖ</span>`.repeat(person.stars)
            : '';

          return `
            <div style="padding: 16px 0; font-size: 15px; font-weight: 400; color: ${colors.namesList}; display: flex; justify-content: space-between; align-items: center;">
              <span style="flex: 1;">${person.name}</span>
              ${person.stars > 0 ? `<span style="display: flex; gap: 2px;">${starsDisplay}</span>` : ''}
            </div>
          `;
        }).join('');
      } else {
        notReportedHtml = ``; // B·ªè tr·ªëng khi perfect day
      }
    }

    // Daily sections for non-weekend days
    const dailySections = !isWeekend ? `
      <!-- Completed Section -->
      <div style="margin-bottom: 32px; background-color: #ffffff; border-radius: 12px; overflow: hidden;">
        <div style="padding: 20px 24px 16px; ${isPerfectDay ? 'border-bottom: 1px solid #22c55e;' : 'border-bottom: 1px solid #000000;'}">
          <div style="display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap; gap: 12px;">
            <h2 style="margin: 0; font-size: 18px; font-weight: 500; color: ${colors.sectionTitle}; display: flex; align-items: center;">
              ${isPerfectDay ? 'T·∫•t c·∫£ ƒë√£ b√°o c√°o' : 'ƒê√£ b√°o c√°o'}
            </h2>
            <span style="${getPerformanceBadgeStyle(reported.length, totalEmployees)} padding: 6px 12px; border-radius: 12px; font-weight: 600; font-size: 13px; min-width: 60px; text-align: center;">
              ${reported.length}/${totalEmployees}
            </span>
          </div>
        </div>
        <div style="padding: 0 24px 8px;">
          ${reportedHtml}
        </div>
      </div>

      <!-- Pending Section -->
      ${!isPerfectDay ? `<div style="margin-bottom: 40px; background-color: #ffffff; border-radius: 12px; overflow: hidden;">
        <div style="padding: 20px 24px 16px; border-bottom: 1px solid #dc3545;">
          <div style="display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap; gap: 12px;">
            <h2 style="margin: 0; font-size: 18px; font-weight: 500; color: ${colors.pendingTitle};">
              Ch∆∞a b√°o c√°o
            </h2>
            <span style="${getPerformanceBadgeStyle(totalEmployees - notReported.length, totalEmployees)} padding: 6px 12px; border-radius: 12px; font-weight: 600; font-size: 13px; min-width: 60px; text-align: center;">
              ${notReported.length}/${totalEmployees}
            </span>
          </div>
        </div>
        <div style="padding: 0 24px 8px;">
          ${notReportedHtml}
        </div>
      </div>` : ''}
    ` : '';

    // HTML Email Template
    const htmlBody = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${isWeekend ? 'Th·ªëng k√™ tu·∫ßn' : 'B√°o c√°o ng√†y'} ${targetDateStr}${isCustomDate ? ' ' : ''}</title>
      </head>
      <body style="margin: 0; padding: 0; background-color: #ffffff; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;">
        
        <!-- Main Container -->
        <div style="max-width: 600px; margin: 40px auto; padding: 40px;">
          
          <!-- Header -->
          <div style="text-align: center; margin-bottom: 48px;">
            <h1 style="margin: 0; font-size: 28px; font-weight: 300; color: ${colors.headerTitle}; letter-spacing: -0.5px;">
              ${isWeekend ? 'Th·ªëng k√™ tu·∫ßn' : `B√°o c√°o t·ªïng h·ª£p ${isPerfectDay ? '' : ''}`}
            </h1>
            <p style="margin: 8px 0 0; font-size: 16px; font-weight: 400; color: ${colors.headerSubtitle};">
              Ph√≤ng Kinh Doanh
            </p>
          </div>

          <!-- Date -->
          <div style="margin-bottom: 32px;">
            <span style="font-size: 14px; font-weight: 500; color: ${colors.dateText};">
              ${detailedDate}
            </span>
          </div>

          <!-- Weekly Dashboard (ch·ªâ Ch·ªß nh·∫≠t) -->
          ${weeklyDashboard}

          <!-- Daily Sections (Th·ª© 2-7) -->
          ${dailySections}

          <!-- Footer -->
          <div style="text-align: center; padding-top: 32px;">
            <p style="margin: 0; font-size: 12px; font-weight: 400; color: ${colors.footerLabel};">
              Tr√¢n tr·ªçng
            </p>
          </div>

          </div>
        
      </body>
      </html>
    `;

    // G·ª≠i email v·ªõi retry mechanism
    sendEmailWithRetry({
      to: CONFIG.emailTo,
      subject: subject,
      htmlBody: htmlBody
    });

    Logger.log(`‚úÖ Email b√°o c√°o ${isWeekend ? 'tu·∫ßn' : 'ng√†y'} ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng`);

  } catch (error) {
    Logger.log(`‚ùå L·ªói khi g·ª≠i email b√°o c√°o: ${error.message}`);
    Logger.log(`Stack trace: ${error.stack}`);
  }
}

/**
 * Parse target date t·ª´ input c·ªßa user
 * @param {string|Date|null} customDate - Ng√†y t√πy ch·ªçn
 * @returns {Date} - Date object ƒë√£ ƒë∆∞·ª£c parse
 */
function parseTargetDate(customDate) {
  if (!customDate) {
    return new Date(); // Ng√†y hi·ªán t·∫°i
  }

  try {
    if (customDate instanceof Date) {
      return new Date(customDate);
    }

    if (typeof customDate === 'string') {
      // Support c√°c format: 'YYYY-MM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY'
      let parsedDate;

      if (customDate.includes('-')) {
        // Format: YYYY-MM-DD
        parsedDate = new Date(customDate);
      } else if (customDate.includes('/')) {
        // Format: MM/DD/YYYY ho·∫∑c DD/MM/YYYY
        parsedDate = new Date(customDate);
      } else {
        throw new Error('Invalid date format');
      }

      if (isNaN(parsedDate.getTime())) {
        throw new Error('Invalid date');
      }

      return parsedDate;
    }

    throw new Error('Unsupported date type');
  } catch (error) {
    Logger.log(`‚ö†Ô∏è L·ªói parse custom date '${customDate}': ${error.message}. S·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i.`);
    return new Date();
  }
}

/**
 * FIXED: G·ª≠i email v·ªõi retry mechanism
 */
function sendEmailWithRetry(emailConfig, maxRetries = 3) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      MailApp.sendEmail(emailConfig);
      Logger.log(`‚úÖ Email sent successfully on attempt ${i + 1}`);
      return true;
    } catch (error) {
      Logger.log(`‚ùå Email attempt ${i + 1} failed: ${error.message}`);
      if (i === maxRetries - 1) throw error;
      Utilities.sleep(1000 * (i + 1)); // Exponential backoff
    }
  }
  return false;
}

/**
 * FINAL FIXED: Weekly Stars Calculation - T√≠nh ƒë√∫ng t·ª´ th·ª© 2 tu·∫ßn hi·ªán t·∫°i ƒë·∫øn h√¥m nay
 */
function getWeeklyStars(sheet, employeeName, ss, CONFIG, currentDate = new Date()) {
  try {
    const currentDayOfWeek = currentDate.getDay(); // 0=CN, 1=T2, 2=T3, 3=T4, 4=T5, 5=T6, 6=T7

    // FIXED: T√¨m th·ª© 2 c·ªßa tu·∫ßn hi·ªán t·∫°i
    let mondayOffset;
    if (currentDayOfWeek === 0) {
      // N·∫øu h√¥m nay l√† Ch·ªß nh·∫≠t -> l·∫•y th·ª© 2 tu·∫ßn tr∆∞·ªõc (6 ng√†y tr∆∞·ªõc)
      mondayOffset = -6;
    } else {
      // N·∫øu l√† T2-T7 -> l·∫•y th·ª© 2 tu·∫ßn n√†y
      mondayOffset = -(currentDayOfWeek - 1);
    }

    const mondayThisWeek = new Date(currentDate);
    mondayThisWeek.setDate(currentDate.getDate() + mondayOffset);

    let stars = 0;

    // FIXED: T√≠nh s·ªë ng√†y t·ª´ th·ª© 2 tu·∫ßn n√†y ƒë·∫øn h√¥m nay (bao g·ªìm h√¥m nay)
    let daysToCheck;
    if (currentDayOfWeek === 0) {
      // Ch·ªß nh·∫≠t: check 6 ng√†y (T2->T7 tu·∫ßn tr∆∞·ªõc)
      daysToCheck = 6;
    } else {
      // T2->T7: check t·ª´ T2 tu·∫ßn n√†y ƒë·∫øn h√¥m nay
      daysToCheck = currentDayOfWeek;
    }

    if (CONFIG.debugMode) {
      const dayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© hai', 'Th·ª© ba', 'Th·ª© t∆∞', 'Th·ª© nƒÉm', 'Th·ª© s√°u', 'Th·ª© b·∫£y'];
      Logger.log(`üîç ${employeeName}: H√¥m nay l√† ${dayNames[currentDayOfWeek]} (${currentDayOfWeek})`);
      Logger.log(`üìÖ Th·ª© 2 tu·∫ßn n√†y: ${Utilities.formatDate(mondayThisWeek, ss.getSpreadsheetTimeZone(), "dd/MM/yyyy")}`);
      Logger.log(`üìä Ki·ªÉm tra ${daysToCheck} ng√†y t·ª´ th·ª© 2 ƒë·∫øn h√¥m nay`);
    }

    // Duy·ªát t·ª´ng ng√†y t·ª´ th·ª© 2 tu·∫ßn n√†y ƒë·∫øn h√¥m nay
    for (let dayOffset = 0; dayOffset < daysToCheck; dayOffset++) {
      const checkDate = new Date(mondayThisWeek);
      checkDate.setDate(mondayThisWeek.getDate() + dayOffset);
      const checkDateStr = Utilities.formatDate(checkDate, ss.getSpreadsheetTimeZone(), "M/d/yyyy");

      if (CONFIG.debugMode) {
        Logger.log(`üìã Checking ng√†y ${checkDateStr} cho ${employeeName}`);
      }

      // T√¨m trong t·∫•t c·∫£ ranges
      let foundReport = false;
      for (let i = 0; i < CONFIG.dateHeaderRanges.length && !foundReport; i++) {
        try {
          const headerRange = sheet.getRange(CONFIG.dateHeaderRanges[i]);
          const headerValues = headerRange.getValues()[0];

          for (let j = 0; j < headerValues.length; j++) {
            const cell = headerValues[j];
            if (cell instanceof Date) {
              const dateStr = Utilities.formatDate(cell, ss.getSpreadsheetTimeZone(), "M/d/yyyy");
              if (dateStr === checkDateStr) {
                const dateColumnIndex = headerRange.getColumn() + j;
                const dataRange = sheet.getRange(CONFIG.dataRanges[i]);
                const values = dataRange.getValues();

                for (let row of values) {
                  const tenNV = row[2];
                  const reportMark = row[dateColumnIndex - dataRange.getColumn()];

                  if (tenNV === employeeName && reportMark === 'X') {
                    stars++;
                    foundReport = true;
                    if (CONFIG.debugMode) {
                      Logger.log(`‚≠ê ${employeeName} c√≥ b√°o c√°o ng√†y ${checkDateStr} -> ${stars} sao`);
                    }
                    break;
                  }
                }
                break;
              }
            }
          }
        } catch (error) {
          Logger.log(`‚ö†Ô∏è L·ªói khi ƒë·∫øm sao cho ${employeeName} ng√†y ${checkDateStr}: ${error.message}`);
          continue;
        }
      }
    }

    if (CONFIG.debugMode) {
      Logger.log(`üåü FINAL: ${employeeName} c√≥ ${stars}/${daysToCheck} sao`);
    }

    return stars;
  } catch (error) {
    Logger.log(`‚ùå L·ªói khi l·∫•y weekly stars cho ${employeeName}: ${error.message}`);
    return 0;
  }
}

/**
 * SIMPLIFIED: Star Color Function - Ch·ªâ d·ª±a v√†o s·ªë sao tuy·ªát ƒë·ªëi
 */
function getStarColor(starCount) {
  // S·ª≠ d·ª•ng thang m√†u ƒë∆°n gi·∫£n theo s·ªë sao
  if (starCount >= 6) return '#22c55e';       // 6 sao - Xanh ƒë·∫≠m ho√†n h·∫£o
  if (starCount >= 5) return '#84cc16';       // 5 sao - Xanh lime xu·∫•t s·∫Øc  
  if (starCount >= 4) return '#22c55e';       // 4 sao - Xanh t·ªët
  if (starCount >= 3) return '#eab308';       // 3 sao - V√†ng kh√°
  if (starCount >= 2) return '#f97316';       // 2 sao - Cam trung b√¨nh
  if (starCount >= 1) return '#94a3b8';       // 1 sao - X√°m nh·∫°t c·∫ßn c·∫£i thi·ªán
  return '#d1d5db';                           // 0 sao - X√°m nh·∫°t ch∆∞a b·∫Øt ƒë·∫ßu
}

/**
 * X√¢y d·ª±ng Weekly Performance Dashboard cho Ch·ªß nh·∫≠t
 */
function buildWeeklyDashboard(sheet, ss, CONFIG, colors, targetDate = new Date()) {
  try {
    const monday = new Date(targetDate);
    monday.setDate(targetDate.getDate() - 6); // Th·ª© 2 tu·∫ßn c·ªßa targetDate

    // L·∫•y t·∫•t c·∫£ nh√¢n vi√™n v√† performance tu·∫ßn
    const allEmployees = getAllEmployeesWeeklyData(sheet, ss, CONFIG, monday);

    // Daily Performance Heatmap
    const heatmap = buildMobileResponsiveHeatmap(allEmployees, monday, ss, CONFIG);

    // Individual Performance Dashboard
    const leaderboard = buildSimplifiedLeaderboard(allEmployees, CONFIG);

    return `
      ${heatmap}
      <div style="border-top: 1px solid #22c55e; margin: 20px 0;"></div>
      ${leaderboard}
    `;
  } catch (error) {
    Logger.log(`‚ùå L·ªói khi t·∫°o Weekly Dashboard: ${error.message}`);
    return `<div style="color: #dc3545; text-align: center; padding: 20px;">Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ tu·∫ßn</div>`;
  }
}

/**
 * Mobile Responsive Heatmap
 */
function buildMobileResponsiveHeatmap(employees, monday, ss, CONFIG) {
  const dayNames = ['T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
  let heatmapHtml = '';

  // T√≠nh t·ª∑ l·ªá cho t·ª´ng ng√†y
  const dayRates = [];
  for (let day = 0; day < 6; day++) {
    const dayReports = employees.filter(emp => emp.dailyReports[day]).length;
    const totalEmployees = employees.length;
    const dayRate = dayReports / totalEmployees;
    dayRates.push(dayRate);
  }

  // T√¨m t·ª∑ l·ªá th·∫•p nh·∫•t
  const minRate = Math.min(...dayRates);

  for (let day = 0; day < 6; day++) {
    const dayRate = dayRates[day];
    const percentage = Math.round(dayRate * 100);

    let boxStyle = '';
    let textColor = '#1a1a1a';
    let displayText = '';

    if (dayRate === 0) {
      // Ng√†y ngh·ªâ (0%) -> hi·ªÉn th·ªã 'x'
      boxStyle = 'background-color: #ffffff; color: #1a1a1a;';
      textColor = '#1a1a1a';
      displayText = 'x';
    } else if (dayRate === 1) {
      // Perfect day (100%) -> m√†u xanh
      boxStyle = 'background-color: #ffffff; color: #22c55e;';
      textColor = '#22c55e';
      displayText = '100';
    } else {
      // Ng√†y th∆∞·ªùng (d∆∞·ªõi 100%) -> m√†u ƒëen
      boxStyle = 'background-color: #ffffff; color: #1a1a1a;';
      textColor = '#1a1a1a';
      displayText = `${percentage}`;
    }

    heatmapHtml += `
      <div style="text-align: center; flex: 1; min-width: 0;">
        <div style="${boxStyle} padding: 12px 4px; border-radius: 8px; margin: 0 2px;">
          <div style="font-size: 10px; font-weight: 600; margin-bottom: 6px; color: ${textColor};">${dayNames[day]}</div>
          <div style="font-size: 14px; font-weight: 700; color: ${textColor};">${displayText}</div>
        </div>
      </div>
    `;
  }

  return `
    <div style="margin-bottom: 32px; background-color: #ffffff; border-radius: 12px; padding: 20px;">
      <div style="display: flex; gap: 0; overflow-x: auto;">
        ${heatmapHtml}
      </div>
    </div>
  `;
}

/**
 * Simplified Leaderboard
 */
function buildSimplifiedLeaderboard(employees, CONFIG) {
  // Remove duplicates by name
  const uniqueEmployees = [];
  const employeeMap = new Map();

  employees.forEach(emp => {
    const existing = employeeMap.get(emp.name);
    if (!existing || emp.totalReports > existing.totalReports) {
      employeeMap.set(emp.name, emp);
    }
  });

  employeeMap.forEach(emp => uniqueEmployees.push(emp));

  // Group by star count
  const starGroups = {};
  uniqueEmployees.forEach(emp => {
    const stars = emp.totalReports;
    if (!starGroups[stars]) {
      starGroups[stars] = [];
    }
    starGroups[stars].push(emp);
  });

  // Sort star levels descending
  const sortedStarLevels = Object.keys(starGroups)
    .map(Number)
    .sort((a, b) => b - a);

  const medalMap = { 0: 'ü•á', 1: 'ü•à', 2: 'ü•â' };

  let leaderboardHtml = '';
  let currentRank = 1;

  sortedStarLevels.forEach((starLevel, groupIndex) => {
    const employeesInGroup = starGroups[starLevel];
    const medal = medalMap[groupIndex] || '';

    employeesInGroup.sort((a, b) => a.name.localeCompare(b.name));

    employeesInGroup.forEach(emp => {
      const starColor = getStarColor(emp.totalReports);
      const starsDisplay = emp.totalReports > 0
        ? `<span style="color: ${starColor}; font-size: 16px;">‚òÖ</span>`.repeat(emp.totalReports)
        : '<span style="color: #94a3b8; font-size: 14px;">Ch∆∞a b√°o c√°o</span>';

      leaderboardHtml += `
        <div style="display: flex; align-items: center; padding: 12px 0;">
          <div style="width: 40px; text-align: center; font-size: 16px;">
            ${medal || currentRank}
          </div>
          <div style="flex: 1; margin-left: 12px;">
            <div style="font-size: 14px; font-weight: 400; color: #22c55e;">${emp.name}</div>
          </div>
          <div style="text-align: right;">
            <div style="display: flex; gap: 2px; justify-content: flex-end;">
              ${starsDisplay}
            </div>
          </div>
        </div>
      `;
      currentRank++;
    });
  });

  return `
    <div style="margin-bottom: 16px; background-color: #ffffff; border-radius: 12px; padding: 16px;">
      ${leaderboardHtml}
    </div>
  `;
}

/**
 * L·∫•y d·ªØ li·ªáu hi·ªáu su·∫•t tu·∫ßn c·ªßa t·∫•t c·∫£ nh√¢n vi√™n
 */
function getAllEmployeesWeeklyData(sheet, ss, CONFIG, monday) {
  const employees = [];

  try {
    for (let i = 0; i < CONFIG.dataRanges.length; i++) {
      try {
        const dataRange = sheet.getRange(CONFIG.dataRanges[i]);
        const values = dataRange.getValues();

        for (let row of values) {
          const maNV = row[0];
          const tenNV = row[2];
          if (maNV && tenNV) {
            const weeklyData = getEmployeeWeeklyPerformance(sheet, tenNV, ss, CONFIG, monday);
            employees.push({
              name: tenNV,
              id: maNV,
              dailyReports: weeklyData.dailyReports,
              totalReports: weeklyData.totalReports,
              completionRate: weeklyData.completionRate,
              streak: weeklyData.streak,
              trend: weeklyData.trend
            });
          }
        }
      } catch (error) {
        Logger.log(`‚ö†Ô∏è L·ªói khi ƒë·ªçc data range ${CONFIG.dataRanges[i]}: ${error.message}`);
        continue;
      }
    }
  } catch (error) {
    Logger.log(`‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu nh√¢n vi√™n: ${error.message}`);
  }

  return employees;
}

/**
 * L·∫•y performance tu·∫ßn c·ªßa m·ªôt nh√¢n vi√™n c·ª• th·ªÉ
 */
function getEmployeeWeeklyPerformance(sheet, employeeName, ss, CONFIG, monday) {
  const dailyReports = [];
  let totalReports = 0;

  try {
    for (let dayOffset = 0; dayOffset < 6; dayOffset++) {
      const checkDate = new Date(monday);
      checkDate.setDate(monday.getDate() + dayOffset);
      const checkDateStr = Utilities.formatDate(checkDate, ss.getSpreadsheetTimeZone(), "M/d/yyyy");

      let reported = false;

      for (let i = 0; i < CONFIG.dateHeaderRanges.length; i++) {
        try {
          const headerRange = sheet.getRange(CONFIG.dateHeaderRanges[i]);
          const headerValues = headerRange.getValues()[0];

          for (let j = 0; j < headerValues.length; j++) {
            const cell = headerValues[j];
            if (cell instanceof Date) {
              const dateStr = Utilities.formatDate(cell, ss.getSpreadsheetTimeZone(), "M/d/yyyy");
              if (dateStr === checkDateStr) {
                const dateColumnIndex = headerRange.getColumn() + j;
                const dataRange = sheet.getRange(CONFIG.dataRanges[i]);
                const values = dataRange.getValues();

                for (let row of values) {
                  const tenNV = row[2];
                  const reportMark = row[dateColumnIndex - dataRange.getColumn()];

                  if (tenNV === employeeName && reportMark === 'X') {
                    reported = true;
                    totalReports++;
                    break;
                  }
                }
                break;
              }
            }
          }
          if (reported) break;
        } catch (error) {
          Logger.log(`‚ö†Ô∏è L·ªói khi ki·ªÉm tra ng√†y ${checkDateStr} cho ${employeeName}: ${error.message}`);
          continue;
        }
      }

      dailyReports.push(reported);
    }
  } catch (error) {
    Logger.log(`‚ùå L·ªói khi l·∫•y performance c·ªßa ${employeeName}: ${error.message}`);
  }

  const completionRate = totalReports / 6;
  const streak = calculateStreak(dailyReports);
  const trend = calculateTrend(dailyReports);

  return {
    dailyReports,
    totalReports,
    completionRate,
    streak,
    trend
  };
}

/**
 * Utility functions
 */
function calculateStreak(dailyReports) {
  let streak = 0;
  for (let i = dailyReports.length - 1; i >= 0; i--) {
    if (dailyReports[i]) {
      streak++;
    } else {
      break;
    }
  }
  return streak;
}

function calculateTrend(dailyReports) {
  const firstHalf = dailyReports.slice(0, 3).filter(Boolean).length;
  const secondHalf = dailyReports.slice(3, 6).filter(Boolean).length;

  if (secondHalf > firstHalf) return 'up';
  if (secondHalf < firstHalf) return 'down';
  return 'stable';
}

/**
 * HELPER FUNCTION: G·ª≠i b√°o c√°o cho ng√†y c·ª• th·ªÉ (d·ªÖ s·ª≠ d·ª•ng)
 * @param {string} dateString - Ng√†y theo format 'YYYY-MM-DD' (VD: '2025-07-15')
 * 
 * USAGE:
 * sendReportForDate('2025-07-15') - G·ª≠i b√°o c√°o ng√†y 15/7/2025
 * sendReportForDate('2025-06-30') - G·ª≠i b√°o c√°o ng√†y 30/6/2025
 */
function sendReportForDate(dateString) {
  Logger.log(`üéØ G·ª≠i b√°o c√°o cho ng√†y: ${dateString}`);
  sendDailyReportSummary(dateString);
}

/**
 * HELPER FUNCTION: G·ª≠i b√°o c√°o cho ng√†y h√¥m qua
 */
function sendReportForYesterday() {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  const yesterdayStr = Utilities.formatDate(yesterday, SpreadsheetApp.getActiveSpreadsheet().getSpreadsheetTimeZone(), "yyyy-MM-dd");
  Logger.log(`üìÖ G·ª≠i b√°o c√°o cho ng√†y h√¥m qua: ${yesterdayStr}`);
  sendDailyReportSummary(yesterday);
}

/**
 * HELPER FUNCTION: G·ª≠i b√°o c√°o cho tu·∫ßn tr∆∞·ªõc (Ch·ªß nh·∫≠t)
 */
function sendReportForLastSunday() {
  const today = new Date();
  const lastSunday = new Date(today);
  const daysToLastSunday = today.getDay() === 0 ? 7 : today.getDay();
  lastSunday.setDate(today.getDate() - daysToLastSunday);

  const lastSundayStr = Utilities.formatDate(lastSunday, SpreadsheetApp.getActiveSpreadsheet().getSpreadsheetTimeZone(), "yyyy-MM-dd");
  Logger.log(`üìä G·ª≠i b√°o c√°o tu·∫ßn cho Ch·ªß nh·∫≠t tr∆∞·ªõc: ${lastSundayStr}`);
  sendDailyReportSummary(lastSunday);
}

/**
 * TEST FUNCTION - Ch·∫°y ƒë·ªÉ verify logic m·ªõi
 */
function testWeeklyStarsLogic() {
  Logger.log('üß™ TESTING WEEKLY STARS LOGIC - 2025-07-01 (Th·ª© ba)');

  // Test case: H√¥m nay l√† th·ª© 3 (1/7/2025)
  const today = new Date('2025-07-01'); // Th·ª© ba
  const currentDayOfWeek = today.getDay(); // 2

  // Th·ª© 2 tu·∫ßn n√†y: 30/6/2025
  const mondayOffset = -(currentDayOfWeek - 1); // -(2-1) = -1
  const mondayThisWeek = new Date(today);
  mondayThisWeek.setDate(today.getDate() + mondayOffset); // 1/7 + (-1) = 30/6

  // S·ªë ng√†y c·∫ßn check: t·ª´ T2 (30/6) ƒë·∫øn T3 (1/7) = 2 ng√†y
  const daysToCheck = currentDayOfWeek; // 2

  Logger.log(`üìÖ H√¥m nay: ${today.toDateString()} (Th·ª© ${currentDayOfWeek + 1})`);
  Logger.log(`üìÖ Th·ª© 2 tu·∫ßn n√†y: ${mondayThisWeek.toDateString()}`);
  Logger.log(`üìä C·∫ßn check: ${daysToCheck} ng√†y`);

  // Gi·∫£ l·∫≠p: ng∆∞·ªùi ƒë√£ b√°o c√°o 30/6 v√† 1/7
  const mockStars = 2; // 2 sao cho 2 ng√†y
  Logger.log(`‚≠ê K·∫øt qu·∫£: ${mockStars} sao cho ${daysToCheck} ng√†y`);
  Logger.log(`üé® M√†u sao: ${getStarColor(mockStars)}`);

  Logger.log('‚úÖ Logic ƒë√£ ƒë√∫ng: Th·ª© ba c√≥ 2 sao (T2 + T3) v·ªõi m√†u cam (#f97316)');
}

/**
 * TEST FUNCTION - Test custom date functionality
 */
function testCustomDateFeature() {
  Logger.log('üß™ TESTING CUSTOM DATE FEATURE');

  // Test 1: Parse different date formats
  Logger.log('üìÖ Test 1: Parse date formats');
  const testDates = [
    '2025-07-15',
    '07/15/2025',
    new Date('2025-07-15'),
    null, // Should use current date
    'invalid-date' // Should fallback to current date
  ];

  testDates.forEach((testDate, index) => {
    const parsed = parseTargetDate(testDate);
    Logger.log(`   ${index + 1}. Input: ${testDate} ‚Üí Parsed: ${parsed.toDateString()}`);
  });

  // Test 2: Simulate sending report for specific date
  Logger.log('üìß Test 2: Simulate custom date report (DRY RUN)');
  Logger.log('   ƒê·ªÉ test th·ª±c t·∫ø, ch·∫°y: sendReportForDate("2025-07-15")');
  Logger.log('   Ho·∫∑c: sendReportForYesterday()');
  Logger.log('   Ho·∫∑c: sendReportForLastSunday()');

  Logger.log('‚úÖ Custom date feature tests completed');
}